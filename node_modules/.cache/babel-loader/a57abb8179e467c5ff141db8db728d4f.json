{"ast":null,"code":"var _jsxFileName = \"/Users/asl/PROJECTS/ideahacks/src/views/selectionPage/SelectionPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, useRadioGroup } from '@chakra-ui/react';\nimport RadioCard from '../../components/RadioCard';\n/* 2. Use the `useRadioGroup` hook to control a group of custom radios. */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectionPage = () => {\n  _s();\n\n  const options = ['morning', 'noon', 'afternoon', 'evening', 'midnight'];\n  const {\n    getRootProps,\n    getRadioProps\n  } = useRadioGroup({\n    name: 'framework',\n    defaultValue: 'morning',\n    onChange: console.log\n  });\n  const group = getRootProps();\n  return /*#__PURE__*/_jsxDEV(Grid, { ...group,\n    gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 2fr))\",\n    gridTemplateRows: \"1fr\",\n    children: options.map(value => {\n      const radio = getRadioProps({\n        value\n      });\n      return /*#__PURE__*/_jsxDEV(RadioCard, { ...radio,\n        children: value\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectionPage, \"L5W0K+EiVThLHg54jO79THOtjpY=\", false, function () {\n  return [useRadioGroup];\n});\n\n_c = SelectionPage;\nexport default SelectionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionPage\");","map":{"version":3,"sources":["/Users/asl/PROJECTS/ideahacks/src/views/selectionPage/SelectionPage.js"],"names":["React","Grid","useRadioGroup","RadioCard","SelectionPage","options","getRootProps","getRadioProps","name","defaultValue","onChange","console","log","group","map","value","radio"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,aAAf,QAAoC,kBAApC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA;;;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAMC,OAAO,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,WAApB,EAAiC,SAAjC,EAA4C,UAA5C,CAAhB;AAEA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCL,aAAa,CAAC;AACpDM,IAAAA,IAAI,EAAE,WAD8C;AAEpDC,IAAAA,YAAY,EAAE,SAFsC;AAGpDC,IAAAA,QAAQ,EAAEC,OAAO,CAACC;AAHkC,GAAD,CAArD;AAMA,QAAMC,KAAK,GAAGP,YAAY,EAA1B;AAEA,sBACE,QAAC,IAAD,OAAUO,KAAV;AAAiB,IAAA,mBAAmB,EAAC,uCAArC;AAA6E,IAAA,gBAAgB,EAAC,KAA9F;AAAA,cACGR,OAAO,CAACS,GAAR,CAAaC,KAAD,IAAW;AACtB,YAAMC,KAAK,GAAGT,aAAa,CAAC;AAAEQ,QAAAA;AAAF,OAAD,CAA3B;AACA,0BACE,QAAC,SAAD,OAA2BC,KAA3B;AAAA,kBACGD;AADH,SAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAPA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAvBD;;GAAMX,a;UAGoCF,a;;;KAHpCE,a;AAyBN,eAAeA,aAAf","sourcesContent":["import React from 'react'\nimport { Grid, useRadioGroup } from '@chakra-ui/react';\nimport RadioCard from '../../components/RadioCard'\n\n/* 2. Use the `useRadioGroup` hook to control a group of custom radios. */\nconst SelectionPage = () => {\n  const options = ['morning', 'noon', 'afternoon', 'evening', 'midnight']\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'framework',\n    defaultValue: 'morning',\n    onChange: console.log,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <Grid {...group} gridTemplateColumns=\"repeat(auto-fill, minmax(200px, 2fr))\" gridTemplateRows=\"1fr\">\n      {options.map((value) => {\n        const radio = getRadioProps({ value })\n        return (\n          <RadioCard key={value} {...radio}>\n            {value}\n          </RadioCard>\n        )\n      })}\n    </Grid>\n  )\n}\n\nexport default SelectionPage;\n\n"]},"metadata":{},"sourceType":"module"}