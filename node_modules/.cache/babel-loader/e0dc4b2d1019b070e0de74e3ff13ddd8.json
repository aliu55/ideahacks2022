{"ast":null,"code":"var _jsxFileName = \"/Users/asl/PROJECTS/ideahacks/src/components/RadioGroup.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, useRadioGroup } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport RadioCard from './RadioCard';\n/* 2. Use the `useRadioGroup` hook to control a group of custom radios. */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RadioGroup = _ref => {\n  _s();\n\n  let {\n    options,\n    handleChange\n  } = _ref;\n  const {\n    getRootProps,\n    getRadioProps\n  } = useRadioGroup({\n    name: 'framework',\n    onChange: handleChange\n  });\n  const group = getRootProps();\n  return /*#__PURE__*/_jsxDEV(Grid, { ...group,\n    gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 2fr))\",\n    gridTemplateRows: \"1fr\",\n    rowGap: 5,\n    children: options.map(value => {\n      const radio = getRadioProps({\n        value\n      });\n      return /*#__PURE__*/_jsxDEV(RadioCard, { ...radio,\n        children: value\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RadioGroup, \"L5W0K+EiVThLHg54jO79THOtjpY=\", false, function () {\n  return [useRadioGroup];\n});\n\n_c = RadioGroup;\nRadioGroup.propTypes = {\n  options: PropTypes.array.isRequired,\n  handleChange: PropTypes.func.isRequired\n};\nexport default RadioGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadioGroup\");","map":{"version":3,"sources":["/Users/asl/PROJECTS/ideahacks/src/components/RadioGroup.js"],"names":["React","Grid","useRadioGroup","PropTypes","RadioCard","RadioGroup","options","handleChange","getRootProps","getRadioProps","name","onChange","group","map","value","radio","propTypes","array","isRequired","func"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,aAAf,QAAoC,kBAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA;;;;AACA,MAAMC,UAAU,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAA4B;AAC9C,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCP,aAAa,CAAC;AACpDQ,IAAAA,IAAI,EAAE,WAD8C;AAEpDC,IAAAA,QAAQ,EAAEJ;AAF0C,GAAD,CAArD;AAKA,QAAMK,KAAK,GAAGJ,YAAY,EAA1B;AAEA,sBACE,QAAC,IAAD,OAAUI,KAAV;AAAiB,IAAA,mBAAmB,EAAC,uCAArC;AAA6E,IAAA,gBAAgB,EAAC,KAA9F;AAAoG,IAAA,MAAM,EAAE,CAA5G;AAAA,cACGN,OAAO,CAACO,GAAR,CAAaC,KAAD,IAAW;AACtB,YAAMC,KAAK,GAAGN,aAAa,CAAC;AAAEK,QAAAA;AAAF,OAAD,CAA3B;AACA,0BACE,QAAC,SAAD,OAA2BC,KAA3B;AAAA,kBACGD;AADH,SAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAPA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CApBD;;GAAMT,U;UACoCH,a;;;KADpCG,U;AAsBNA,UAAU,CAACW,SAAX,GAAuB;AACrBV,EAAAA,OAAO,EAAEH,SAAS,CAACc,KAAV,CAAgBC,UADJ;AAErBX,EAAAA,YAAY,EAAEJ,SAAS,CAACgB,IAAV,CAAeD;AAFR,CAAvB;AAKA,eAAeb,UAAf","sourcesContent":["import React from 'react'\nimport { Grid, useRadioGroup } from '@chakra-ui/react';\nimport PropTypes from 'prop-types'\nimport RadioCard from './RadioCard';\n\n/* 2. Use the `useRadioGroup` hook to control a group of custom radios. */\nconst RadioGroup = ({options, handleChange}) => {\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'framework',\n    onChange: handleChange,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <Grid {...group} gridTemplateColumns=\"repeat(auto-fill, minmax(200px, 2fr))\" gridTemplateRows=\"1fr\" rowGap={5}>\n      {options.map((value) => {\n        const radio = getRadioProps({ value })\n        return (\n          <RadioCard key={value} {...radio}>\n            {value}\n          </RadioCard>\n        )\n      })}\n    </Grid>\n  )\n}\n\nRadioGroup.propTypes = {\n  options: PropTypes.array.isRequired,\n  handleChange: PropTypes.func.isRequired,\n}\n\nexport default RadioGroup;\n\n"]},"metadata":{},"sourceType":"module"}